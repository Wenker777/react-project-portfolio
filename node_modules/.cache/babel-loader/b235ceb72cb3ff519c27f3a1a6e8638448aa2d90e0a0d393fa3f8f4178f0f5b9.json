{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kerim\\\\Desktop\\\\F-end\\\\frontend\\\\react\\\\react-project\\\\react-2\\\\src\\\\js-components\\\\Dialogs\\\\DialogsContainer.jsx\";\nimport DialogItem from \"./DialogItem\";\nimport Dialogs from \"./Dialogs\";\nimport DialogMessage from \"./DialogsMessage\";\nimport React from \"react\";\nimport StoreContext from \"../../StoreContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DialogsContainer = props => {\n  return /*#__PURE__*/_jsxDEV(StoreContext.Consumer, {\n    children: store => {\n      let state = store.getState();\n      console.log(state);\n      let dialogsElements = store.dialogsElements.dialogsData.map(d => /*#__PURE__*/_jsxDEV(DialogItem, {\n        name: d.name,\n        id: d.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 70\n      }, this));\n      /*Создаем новую переменную в которую присваиваем преобразование массива данных применяя метод .map \r\n       далее объявляем стрелочную ф-ию => и пишем компоненту внутри неё прописываем атрибуты name & id которые достаем из названия ф-ии.\r\n       Далее просто вставляем новый массив в нужный участок JSX разметки\r\n       и он отобразит максимальное колличество элементов в случае dialogsData их будет 5*/\n      let messagesElements = store.dialogsElements.messagesData.map(m => /*#__PURE__*/_jsxDEV(DialogMessage, {\n        message: m.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 72\n      }, this));\n      return /*#__PURE__*/_jsxDEV(Dialogs, {\n        dialogsElements: dialogsElements,\n        messagesElements: messagesElements,\n        newMessage: state.dialogsElements,\n        dispatch: state.dispatch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 5\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 3\n  }, this);\n};\n_c = DialogsContainer;\nexport default DialogsContainer;\nvar _c;\n$RefreshReg$(_c, \"DialogsContainer\");","map":{"version":3,"names":["DialogItem","Dialogs","DialogMessage","React","StoreContext","jsxDEV","_jsxDEV","DialogsContainer","props","Consumer","children","store","state","getState","console","log","dialogsElements","dialogsData","map","d","name","id","fileName","_jsxFileName","lineNumber","columnNumber","messagesElements","messagesData","m","message","newMessage","dispatch","_c","$RefreshReg$"],"sources":["C:/Users/Kerim/Desktop/F-end/frontend/react/react-project/react-2/src/js-components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["import DialogItem from \"./DialogItem\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport DialogMessage from \"./DialogsMessage\";\r\nimport React from \"react\"\r\nimport StoreContext from \"../../StoreContext\";\r\n\r\nconst DialogsContainer = (props) => {\r\n\t\r\n\treturn (\r\n\t\t<StoreContext.Consumer>\r\n\t\t\t{\r\n\t\t\t(store) => {\r\n\t\t\t\tlet state = store.getState();\r\n\t\t\t\tconsole.log(state);\r\n\t\t\t\tlet dialogsElements = store.dialogsElements.dialogsData.map(d => <DialogItem name={d.name} id={d.id} />)\r\n\t\t\t\t/*Создаем новую переменную в которую присваиваем преобразование массива данных применяя метод .map \r\n\t\t\t\t далее объявляем стрелочную ф-ию => и пишем компоненту внутри неё прописываем атрибуты name & id которые достаем из названия ф-ии.\r\n\t\t\t\t Далее просто вставляем новый массив в нужный участок JSX разметки\r\n\t\t\t\t и он отобразит максимальное колличество элементов в случае dialogsData их будет 5*/\r\n\t\t\t\tlet messagesElements = store.dialogsElements.messagesData.map(m => <DialogMessage message={m.message} />);\r\n\t\t\t\treturn(\r\n\t\t\t\t<Dialogs dialogsElements={dialogsElements} \r\n\t\t\t\tmessagesElements={messagesElements}\r\n\t\t\t\t newMessage={state.dialogsElements} \r\n\t\t\t\t dispatch={state.dispatch} />\r\n\t\t\t\t )\r\n\t\t\t}\r\n\t\t}\r\n\t\t</StoreContext.Consumer>\r\n\t);\r\n}\r\nexport default DialogsContainer;"],"mappings":";AAAA,OAAOA,UAAU,MAAM,cAAc;AACrC,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,aAAa,MAAM,kBAAkB;AAC5C,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,YAAY,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,gBAAgB,GAAIC,KAAK,IAAK;EAEnC,oBACCF,OAAA,CAACF,YAAY,CAACK,QAAQ;IAAAC,QAAA,EAEpBC,KAAK,IAAK;MACV,IAAIC,KAAK,GAAGD,KAAK,CAACE,QAAQ,CAAC,CAAC;MAC5BC,OAAO,CAACC,GAAG,CAACH,KAAK,CAAC;MAClB,IAAII,eAAe,GAAGL,KAAK,CAACK,eAAe,CAACC,WAAW,CAACC,GAAG,CAACC,CAAC,iBAAIb,OAAA,CAACN,UAAU;QAACoB,IAAI,EAAED,CAAC,CAACC,IAAK;QAACC,EAAE,EAAEF,CAAC,CAACE;MAAG;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,CAAC;MACxG;AACJ;AACA;AACA;MACI,IAAIC,gBAAgB,GAAGf,KAAK,CAACK,eAAe,CAACW,YAAY,CAACT,GAAG,CAACU,CAAC,iBAAItB,OAAA,CAACJ,aAAa;QAAC2B,OAAO,EAAED,CAAC,CAACC;MAAQ;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,CAAC;MACzG,oBACAnB,OAAA,CAACL,OAAO;QAACe,eAAe,EAAEA,eAAgB;QAC1CU,gBAAgB,EAAEA,gBAAiB;QAClCI,UAAU,EAAElB,KAAK,CAACI,eAAgB;QAClCe,QAAQ,EAAEnB,KAAK,CAACmB;MAAS;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAE9B;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEqB,CAAC;AAE1B,CAAC;AAAAO,EAAA,GAxBKzB,gBAAgB;AAyBtB,eAAeA,gBAAgB;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}