{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kerim\\\\Desktop\\\\F-end\\\\frontend\\\\react\\\\react-project\\\\react-2\\\\src\\\\js-components\\\\Dialogs\\\\Dialogs.jsx\";\nimport DialogItem from \"./DialogItem\";\nimport s from \"./Dialogs.module.css\";\nimport DialogMessage from \"./DialogsMessage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dialogs = props => {\n  let dialogsElements = props.dialogsElements.dialogsData.map(d => /*#__PURE__*/_jsxDEV(DialogItem, {\n    name: d.name,\n    id: d.id\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 68\n  }, this));\n  /*Создаем новую переменную в которую присваиваем преобразование массива данных применяя метод .map \r\n   далее объявляем стрелочную ф-ию => и пишем компоненту внутри неё прописываем атрибуты name & id которые достаем из названия ф-ии.\r\n   Далее просто вставляем новый массив в нужный участок JSX разметки\r\n   и он отобразит максимальное колличество элементов в случае dialogsData их будет 5*/\n\n  // let messagesElements = props.dialogsElements.map( m => <DialogMessage messageFromMe={m.messagesData.message} messageFromAnother={m.messagesAnotherData.message}/>)\n  // let messagesAnotherElements = props.dialogsElements.messagesAnotherData.map( m => <DialogMessage messageFromAnother={m.message} />)\n  // let messagesElements = props.dialogsElements.messagesData.map( m => <DialogMessage messageFromMe={m.messageFromeMe} messageFromAnother={m.messageFromAnother}/>);\n  // const filteredObj = Object.fromEntries(\n  // \tObject.entries(messagesElements[0]).props.filter(([key, value]) => value !== undefined)\n  // );\n  // console.log(filteredObj);\n\n  const messagesElements = props.dialogsElements.messagesData.map(m => /*#__PURE__*/_jsxDEV(DialogMessage, {\n    messageFromMe: m.messageFromeMe,\n    messageFromAnother: m.messageFromAnother\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 71\n  }, this));\n  const filteredElements = messagesElements.map(el => {\n    const filteredProps = Object.fromEntries(Object.entries(el.props).filter(_ref => {\n      let [key, value] = _ref;\n      return value !== undefined;\n    }));\n    return Object.assign({}, el, {\n      props: filteredProps\n    });\n  });\n  console.log(filteredElements);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: s.dialogs__row,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.dialogs__items,\n      children: dialogsElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.dialogs__messages,\n      children: [filteredElements, /*#__PURE__*/_jsxDEV(WritingMessage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 3\n  }, this);\n};\n_c = Dialogs;\nexport default Dialogs;\nvar _c;\n$RefreshReg$(_c, \"Dialogs\");","map":{"version":3,"names":["DialogItem","s","DialogMessage","jsxDEV","_jsxDEV","Dialogs","props","dialogsElements","dialogsData","map","d","name","id","fileName","_jsxFileName","lineNumber","columnNumber","messagesElements","messagesData","m","messageFromMe","messageFromeMe","messageFromAnother","filteredElements","el","filteredProps","Object","fromEntries","entries","filter","_ref","key","value","undefined","assign","console","log","className","dialogs__row","children","dialogs__items","dialogs__messages","WritingMessage","_c","$RefreshReg$"],"sources":["C:/Users/Kerim/Desktop/F-end/frontend/react/react-project/react-2/src/js-components/Dialogs/Dialogs.jsx"],"sourcesContent":["import DialogItem from \"./DialogItem\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport DialogMessage from \"./DialogsMessage\";\r\nconst Dialogs = (props) => {\r\n\tlet dialogsElements = props.dialogsElements.dialogsData.map( d => <DialogItem name={d.name} id={d.id}/>) \r\n\t/*Создаем новую переменную в которую присваиваем преобразование массива данных применяя метод .map \r\n\t далее объявляем стрелочную ф-ию => и пишем компоненту внутри неё прописываем атрибуты name & id которые достаем из названия ф-ии.\r\n\t Далее просто вставляем новый массив в нужный участок JSX разметки\r\n\t и он отобразит максимальное колличество элементов в случае dialogsData их будет 5*/\r\n\r\n\t// let messagesElements = props.dialogsElements.map( m => <DialogMessage messageFromMe={m.messagesData.message} messageFromAnother={m.messagesAnotherData.message}/>)\r\n\t// let messagesAnotherElements = props.dialogsElements.messagesAnotherData.map( m => <DialogMessage messageFromAnother={m.message} />)\r\n\t// let messagesElements = props.dialogsElements.messagesData.map( m => <DialogMessage messageFromMe={m.messageFromeMe} messageFromAnother={m.messageFromAnother}/>);\r\n\t// const filteredObj = Object.fromEntries(\r\n\t// \tObject.entries(messagesElements[0]).props.filter(([key, value]) => value !== undefined)\r\n\t// );\r\n\t// console.log(filteredObj);\r\n\r\n\tconst messagesElements = props.dialogsElements.messagesData.map(m => <DialogMessage messageFromMe={m.messageFromeMe} messageFromAnother={m.messageFromAnother}/>);\r\nconst filteredElements = messagesElements.map(el => {\r\n  const filteredProps = Object.fromEntries(Object.entries(el.props).filter(([key, value]) => value !== undefined));\r\n  return Object.assign({}, el, { props: filteredProps });\r\n});\r\nconsole.log(filteredElements);\r\n\treturn (\r\n\t\t<div className={s.dialogs__row}>\r\n\t\t\t<div className={s.dialogs__items}>\r\n\t\t\t\t{dialogsElements}\r\n\t\t\t</div>\r\n\t\t\t<div className={s.dialogs__messages}>\r\n\t\t\t\t{filteredElements}\r\n\t\t\t\t<WritingMessage/>\r\n\t\t\t\t{/* {messagesElements} */}\r\n\t\t\t\t{/* {messagesAnotherElements} */}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default Dialogs;"],"mappings":";AAAA,OAAOA,UAAU,MAAM,cAAc;AACrC,OAAOC,CAAC,MAAM,sBAAsB;AACpC,OAAOC,aAAa,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC7C,MAAMC,OAAO,GAAIC,KAAK,IAAK;EAC1B,IAAIC,eAAe,GAAGD,KAAK,CAACC,eAAe,CAACC,WAAW,CAACC,GAAG,CAAEC,CAAC,iBAAIN,OAAA,CAACJ,UAAU;IAACW,IAAI,EAAED,CAAC,CAACC,IAAK;IAACC,EAAE,EAAEF,CAAC,CAACE;EAAG;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAC,CAAC,CAAC;EACxG;AACD;AACA;AACA;;EAEC;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMC,gBAAgB,GAAGX,KAAK,CAACC,eAAe,CAACW,YAAY,CAACT,GAAG,CAACU,CAAC,iBAAIf,OAAA,CAACF,aAAa;IAACkB,aAAa,EAAED,CAAC,CAACE,cAAe;IAACC,kBAAkB,EAAEH,CAAC,CAACG;EAAmB;IAAAT,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAC,CAAC,CAAC;EAClK,MAAMO,gBAAgB,GAAGN,gBAAgB,CAACR,GAAG,CAACe,EAAE,IAAI;IAClD,MAAMC,aAAa,GAAGC,MAAM,CAACC,WAAW,CAACD,MAAM,CAACE,OAAO,CAACJ,EAAE,CAAClB,KAAK,CAAC,CAACuB,MAAM,CAACC,IAAA;MAAA,IAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,GAAAF,IAAA;MAAA,OAAKE,KAAK,KAAKC,SAAS;IAAA,EAAC,CAAC;IAChH,OAAOP,MAAM,CAACQ,MAAM,CAAC,CAAC,CAAC,EAAEV,EAAE,EAAE;MAAElB,KAAK,EAAEmB;IAAc,CAAC,CAAC;EACxD,CAAC,CAAC;EACFU,OAAO,CAACC,GAAG,CAACb,gBAAgB,CAAC;EAC5B,oBACCnB,OAAA;IAAKiC,SAAS,EAAEpC,CAAC,CAACqC,YAAa;IAAAC,QAAA,gBAC9BnC,OAAA;MAAKiC,SAAS,EAAEpC,CAAC,CAACuC,cAAe;MAAAD,QAAA,EAC/BhC;IAAe;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CAAC,eACNZ,OAAA;MAAKiC,SAAS,EAAEpC,CAAC,CAACwC,iBAAkB;MAAAF,QAAA,GAClChB,gBAAgB,eACjBnB,OAAA,CAACsC,cAAc;QAAA7B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGb,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAER,CAAC;AAAA2B,EAAA,GAlCKtC,OAAO;AAmCb,eAAeA,OAAO;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}