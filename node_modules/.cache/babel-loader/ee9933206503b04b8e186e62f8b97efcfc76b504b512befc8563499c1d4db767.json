{"ast":null,"code":"import { authAPI } from \"../API/api\";\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\nconst authReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  console.log(state.isAuth);\n  switch (action.type) {\n    case 'SET-USER-DATA':\n      return {\n        ...state,\n        ...action.data,\n        isAuth: true\n      };\n    default:\n      return state;\n  }\n};\nexport let setAuthUserData = (userId, email, login) => {\n  return {\n    type: 'SET-USER-DATA',\n    data: {\n      userId,\n      email,\n      login\n    }\n  };\n};\nexport const getAuthMeThunkCreator = count => dispatch => {\n  authAPI.getAuthData().then(data => {\n    if (data.resultCode === 0) {\n      let {\n        id,\n        email,\n        login\n      } = data.data;\n      dispatch(setAuthUserData(id, email, login));\n      console.log('Авторизация прошла успешно');\n    } else {\n      console.log('Нужно авторизоваться');\n    }\n  });\n};\nexport default authReducer;","map":{"version":3,"names":["authAPI","initialState","userId","email","login","isAuth","authReducer","state","arguments","length","undefined","action","console","log","type","data","setAuthUserData","getAuthMeThunkCreator","count","dispatch","getAuthData","then","resultCode","id"],"sources":["C:/Users/Kerim/Desktop/F-end/frontend/react/react-project/react-2/src/redux/auth-reducer.js"],"sourcesContent":["import { authAPI } from \"../API/api\";\r\nlet initialState = {\r\n\tuserId: null,\r\n\temail: null,\r\n\tlogin: null,\r\n\tisAuth: false,\r\n}\r\n\r\nconst authReducer = (state = initialState, action) => { \r\n\tconsole.log(state.isAuth)\r\n\tswitch (action.type) {\r\n\t\tcase 'SET-USER-DATA':\r\n\t\t\treturn{\r\n\t\t\t\t...state,\r\n\t\t\t\t...action.data,\r\n\t\t\t\tisAuth: true,\r\n\t\t\t}\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport let setAuthUserData = (userId, email, login) => {\r\n\treturn ({\r\n\t\ttype: 'SET-USER-DATA',\r\n\t\tdata: {userId, email, login}\r\n})\r\n}\r\n\r\nexport const getAuthMeThunkCreator = (count) => (dispatch) => {\r\n\tauthAPI.getAuthData()\r\n\t.then(data => {\r\n\t\tif(data.resultCode === 0){\r\n\t\t\tlet {id, email, login} = data.data;\r\n\t\t\tdispatch(setAuthUserData(id, email, login));\r\n\t\t\tconsole.log('Авторизация прошла успешно')\r\n\t\t} else{\r\n\t\t\tconsole.log('Нужно авторизоваться')\r\n\t\t}\r\n})\r\n}\r\nexport default authReducer;"],"mappings":"AAAA,SAASA,OAAO,QAAQ,YAAY;AACpC,IAAIC,YAAY,GAAG;EAClBC,MAAM,EAAE,IAAI;EACZC,KAAK,EAAE,IAAI;EACXC,KAAK,EAAE,IAAI;EACXC,MAAM,EAAE;AACT,CAAC;AAED,MAAMC,WAAW,GAAG,SAAAA,CAAA,EAAkC;EAAA,IAAjCC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGP,YAAY;EAAA,IAAEU,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAChDE,OAAO,CAACC,GAAG,CAACN,KAAK,CAACF,MAAM,CAAC;EACzB,QAAQM,MAAM,CAACG,IAAI;IAClB,KAAK,eAAe;MACnB,OAAM;QACL,GAAGP,KAAK;QACR,GAAGI,MAAM,CAACI,IAAI;QACdV,MAAM,EAAE;MACT,CAAC;IAEF;MACC,OAAOE,KAAK;EACd;AACD,CAAC;AAED,OAAO,IAAIS,eAAe,GAAGA,CAACd,MAAM,EAAEC,KAAK,EAAEC,KAAK,KAAK;EACtD,OAAQ;IACPU,IAAI,EAAE,eAAe;IACrBC,IAAI,EAAE;MAACb,MAAM;MAAEC,KAAK;MAAEC;IAAK;EAC7B,CAAC;AACD,CAAC;AAED,OAAO,MAAMa,qBAAqB,GAAIC,KAAK,IAAMC,QAAQ,IAAK;EAC7DnB,OAAO,CAACoB,WAAW,CAAC,CAAC,CACpBC,IAAI,CAACN,IAAI,IAAI;IACb,IAAGA,IAAI,CAACO,UAAU,KAAK,CAAC,EAAC;MACxB,IAAI;QAACC,EAAE;QAAEpB,KAAK;QAAEC;MAAK,CAAC,GAAGW,IAAI,CAACA,IAAI;MAClCI,QAAQ,CAACH,eAAe,CAACO,EAAE,EAAEpB,KAAK,EAAEC,KAAK,CAAC,CAAC;MAC3CQ,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IAC1C,CAAC,MAAK;MACLD,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACpC;EACF,CAAC,CAAC;AACF,CAAC;AACD,eAAeP,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}