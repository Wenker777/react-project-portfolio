{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kerim\\\\Desktop\\\\F-end\\\\frontend\\\\react\\\\react-project\\\\react-2\\\\src\\\\js-components\\\\Dialogs\\\\DialogsContainer.jsx\";\nimport DialogItem from \"./DialogItem\";\nimport Dialogs from \"./Dialogs\";\nimport s from \"./Dialogs.module.css\";\nimport DialogMessage from \"./DialogsMessage\";\nimport WritingMessage from \"./DialogsWritingMessage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DialogsContainer = props => {\n  let dialogsElements = props.dialogsElements.dialogsData.map(d => /*#__PURE__*/_jsxDEV(DialogItem, {\n    name: d.name,\n    id: d.id\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 68\n  }, this));\n  /*Создаем новую переменную в которую присваиваем преобразование массива данных применяя метод .map \r\n   далее объявляем стрелочную ф-ию => и пишем компоненту внутри неё прописываем атрибуты name & id которые достаем из названия ф-ии.\r\n   Далее просто вставляем новый массив в нужный участок JSX разметки\r\n   и он отобразит максимальное колличество элементов в случае dialogsData их будет 5*/\n  let messagesElements = props.dialogsElements.messagesData.map(m => /*#__PURE__*/_jsxDEV(DialogMessage, {\n    message: m.message\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 70\n  }, this));\n  return /*#__PURE__*/_jsxDEV(Dialogs, {\n    dialogsElements: dialogsElements,\n    messagesElements: messagesElements\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 3\n  }, this);\n};\n_c = DialogsContainer;\nexport default DialogsContainer;\nvar _c;\n$RefreshReg$(_c, \"DialogsContainer\");","map":{"version":3,"names":["DialogItem","Dialogs","s","DialogMessage","WritingMessage","jsxDEV","_jsxDEV","DialogsContainer","props","dialogsElements","dialogsData","map","d","name","id","fileName","_jsxFileName","lineNumber","columnNumber","messagesElements","messagesData","m","message","_c","$RefreshReg$"],"sources":["C:/Users/Kerim/Desktop/F-end/frontend/react/react-project/react-2/src/js-components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["import DialogItem from \"./DialogItem\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport DialogMessage from \"./DialogsMessage\";\r\nimport WritingMessage from \"./DialogsWritingMessage\";\r\nconst DialogsContainer = (props) => {\r\n\tlet dialogsElements = props.dialogsElements.dialogsData.map( d => <DialogItem name={d.name} id={d.id}/>) \r\n\t/*Создаем новую переменную в которую присваиваем преобразование массива данных применяя метод .map \r\n\t далее объявляем стрелочную ф-ию => и пишем компоненту внутри неё прописываем атрибуты name & id которые достаем из названия ф-ии.\r\n\t Далее просто вставляем новый массив в нужный участок JSX разметки\r\n\t и он отобразит максимальное колличество элементов в случае dialogsData их будет 5*/\r\n\tlet messagesElements = props.dialogsElements.messagesData.map( m => <DialogMessage message={m.message}/>);\r\n\treturn (\r\n\t\t<Dialogs dialogsElements={dialogsElements} messagesElements={messagesElements}/>\r\n\t);\r\n}\r\nexport default DialogsContainer;"],"mappings":";AAAA,OAAOA,UAAU,MAAM,cAAc;AACrC,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,CAAC,MAAM,sBAAsB;AACpC,OAAOC,aAAa,MAAM,kBAAkB;AAC5C,OAAOC,cAAc,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACrD,MAAMC,gBAAgB,GAAIC,KAAK,IAAK;EACnC,IAAIC,eAAe,GAAGD,KAAK,CAACC,eAAe,CAACC,WAAW,CAACC,GAAG,CAAEC,CAAC,iBAAIN,OAAA,CAACN,UAAU;IAACa,IAAI,EAAED,CAAC,CAACC,IAAK;IAACC,EAAE,EAAEF,CAAC,CAACE;EAAG;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAC,CAAC,CAAC;EACxG;AACD;AACA;AACA;EACC,IAAIC,gBAAgB,GAAGX,KAAK,CAACC,eAAe,CAACW,YAAY,CAACT,GAAG,CAAEU,CAAC,iBAAIf,OAAA,CAACH,aAAa;IAACmB,OAAO,EAAED,CAAC,CAACC;EAAQ;IAAAP,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAC,CAAC,CAAC;EACzG,oBACCZ,OAAA,CAACL,OAAO;IAACQ,eAAe,EAAEA,eAAgB;IAACU,gBAAgB,EAAEA;EAAiB;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAC,CAAC;AAElF,CAAC;AAAAK,EAAA,GAVKhB,gBAAgB;AAWtB,eAAeA,gBAAgB;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}