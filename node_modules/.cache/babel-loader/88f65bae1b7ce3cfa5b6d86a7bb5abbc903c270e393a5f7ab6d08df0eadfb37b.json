{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kerim\\\\Desktop\\\\F-end\\\\frontend\\\\react\\\\react-project\\\\react-2\\\\src\\\\js-components\\\\Dialogs\\\\DialogsContainer.jsx\";\nimport DialogItem from \"./DialogItem\";\nimport Dialogs from \"./Dialogs\";\nimport DialogMessage from \"./DialogsMessage\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\n// const DialogsContainer = (props) => {\n\n// \treturn (\n// \t\t<StoreContext.Consumer>\n// \t\t\t{\n// \t\t\t(store) => {\n// \t\t\t\tlet state = store.getState();\n// \t\t\t\tlet dialogsElements = state.messagesPage.dialogsData.map(d => <DialogItem name={d.name} id={d.id} />)\n// \t\t\t\t/*Создаем новую переменную в которую присваиваем преобразование массива данных применяя метод .map \n// \t\t\t\t далее объявляем стрелочную ф-ию => и пишем компоненту внутри неё прописываем атрибуты name & id которые достаем из названия ф-ии.\n// \t\t\t\t Далее просто вставляем новый массив в нужный участок JSX разметки\n// \t\t\t\t и он отобразит максимальное колличество элементов в случае dialogsData их будет 5*/\n// \t\t\t\tlet messagesElements = state.messagesPage.messagesData.map(m => <DialogMessage message={m.message} />);\n// \t\t\t\treturn(\n// \t\t\t\t<Dialogs \n// \t\t\t\t\tdialogsElements={dialogsElements} \n// \t\t\t\t\tmessagesElements={messagesElements}\n// \t\t\t\t\tnewMessage={state.messagesPage} \n// \t\t\t\t\tdispatch={store.dispatch} />\n// \t\t\t\t )\n// \t\t\t}\n// \t\t}\n// \t\t</StoreContext.Consumer>\n// \t);\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mapStateToProps = state => {\n  // Возвращает объект    // state - store.getState() это тоже самое, но библиотека коннект сама преобразовывает его в state\n  return {\n    dialogsElements: state.messagesPage.dialogsData.map(d => /*#__PURE__*/_jsxDEV(DialogItem, {\n      name: d.name,\n      id: d.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 60\n    }, this)),\n    /*Создаем новую переменную в которую присваиваем преобразование массива данных применяя метод .map \r\n    далее объявляем стрелочную ф-ию => и пишем компоненту внутри неё прописываем атрибуты name & id которые достаем из названия ф-ии.\r\n    Далее просто вставляем новый массив в нужный участок JSX разметки\r\n    и он отобразит максимальное колличество элементов в случае dialogsData их будет 5*/\n    messagesElements: state.messagesPage.messagesData.map(m => /*#__PURE__*/_jsxDEV(DialogMessage, {\n      message: m.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 62\n    }, this)),\n    newMessage: state.messagesPage\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    dispatch: dispatch\n  };\n};\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs);\nexport default DialogsContainer;","map":{"version":3,"names":["DialogItem","Dialogs","DialogMessage","React","connect","jsxDEV","_jsxDEV","mapStateToProps","state","dialogsElements","messagesPage","dialogsData","map","d","name","id","fileName","_jsxFileName","lineNumber","columnNumber","messagesElements","messagesData","m","message","newMessage","mapDispatchToProps","dispatch","DialogsContainer"],"sources":["C:/Users/Kerim/Desktop/F-end/frontend/react/react-project/react-2/src/js-components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["import DialogItem from \"./DialogItem\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport DialogMessage from \"./DialogsMessage\";\r\nimport React from \"react\"\r\nimport { connect } from \"react-redux\";\r\n\r\n// const DialogsContainer = (props) => {\r\n\t\r\n// \treturn (\r\n// \t\t<StoreContext.Consumer>\r\n// \t\t\t{\r\n// \t\t\t(store) => {\r\n// \t\t\t\tlet state = store.getState();\r\n// \t\t\t\tlet dialogsElements = state.messagesPage.dialogsData.map(d => <DialogItem name={d.name} id={d.id} />)\r\n// \t\t\t\t/*Создаем новую переменную в которую присваиваем преобразование массива данных применяя метод .map \r\n// \t\t\t\t далее объявляем стрелочную ф-ию => и пишем компоненту внутри неё прописываем атрибуты name & id которые достаем из названия ф-ии.\r\n// \t\t\t\t Далее просто вставляем новый массив в нужный участок JSX разметки\r\n// \t\t\t\t и он отобразит максимальное колличество элементов в случае dialogsData их будет 5*/\r\n// \t\t\t\tlet messagesElements = state.messagesPage.messagesData.map(m => <DialogMessage message={m.message} />);\r\n// \t\t\t\treturn(\r\n// \t\t\t\t<Dialogs \r\n// \t\t\t\t\tdialogsElements={dialogsElements} \r\n// \t\t\t\t\tmessagesElements={messagesElements}\r\n// \t\t\t\t\tnewMessage={state.messagesPage} \r\n// \t\t\t\t\tdispatch={store.dispatch} />\r\n// \t\t\t\t )\r\n// \t\t\t}\r\n// \t\t}\r\n// \t\t</StoreContext.Consumer>\r\n// \t);\r\n// }\r\nconst mapStateToProps = (state) =>{  // Возвращает объект    // state - store.getState() это тоже самое, но библиотека коннект сама преобразовывает его в state\r\n\treturn {\r\n\t\tdialogsElements: state.messagesPage.dialogsData.map(d => <DialogItem name={d.name} id={d.id} />),\r\n\t\t/*Создаем новую переменную в которую присваиваем преобразование массива данных применяя метод .map \r\n\t\tдалее объявляем стрелочную ф-ию => и пишем компоненту внутри неё прописываем атрибуты name & id которые достаем из названия ф-ии.\r\n\t\tДалее просто вставляем новый массив в нужный участок JSX разметки\r\n\t\tи он отобразит максимальное колличество элементов в случае dialogsData их будет 5*/\r\n\t\tmessagesElements: state.messagesPage.messagesData.map(m => <DialogMessage message={m.message} />),\r\n\r\n\t\tnewMessage: state.messagesPage,\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\nreturn {\r\n\tdispatch: dispatch,\r\n\t}\r\n}\r\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs);\r\nexport default DialogsContainer;"],"mappings":";AAAA,OAAOA,UAAU,MAAM,cAAc;AACrC,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,aAAa,MAAM,kBAAkB;AAC5C,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,aAAa;;AAErC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,eAAe,GAAIC,KAAK,IAAI;EAAG;EACpC,OAAO;IACNC,eAAe,EAAED,KAAK,CAACE,YAAY,CAACC,WAAW,CAACC,GAAG,CAACC,CAAC,iBAAIP,OAAA,CAACN,UAAU;MAACc,IAAI,EAAED,CAAC,CAACC,IAAK;MAACC,EAAE,EAAEF,CAAC,CAACE;IAAG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,CAAC;IAChG;AACF;AACA;AACA;IACEC,gBAAgB,EAAEZ,KAAK,CAACE,YAAY,CAACW,YAAY,CAACT,GAAG,CAACU,CAAC,iBAAIhB,OAAA,CAACJ,aAAa;MAACqB,OAAO,EAAED,CAAC,CAACC;IAAQ;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,CAAC;IAEjGK,UAAU,EAAEhB,KAAK,CAACE;EACnB,CAAC;AACF,CAAC;AAED,MAAMe,kBAAkB,GAAIC,QAAQ,IAAI;EACxC,OAAO;IACNA,QAAQ,EAAEA;EACV,CAAC;AACF,CAAC;AACD,MAAMC,gBAAgB,GAAGvB,OAAO,CAACG,eAAe,EAAEkB,kBAAkB,CAAC,CAACxB,OAAO,CAAC;AAC9E,eAAe0B,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}