{"ast":null,"code":"import { usersAPI } from \"../API/api\";\nlet initialState = {\n  users: [],\n  pageSize: 20,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isFetching: false,\n  options: [{\n    option: 'Randomly',\n    value: 'random'\n  }, {\n    option: 'By name',\n    value: 'name'\n  }],\n  selectedValue: null\n};\nconst usersReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  // Изначально под именем state пришел profilePage при удовлетворении условия if он преобразовывается и возвращается через тот-же state\n  // rerender происходит не здесь\n  switch (action.type) {\n    case 'SET-USERS':\n      return {\n        ...state,\n        users: action.users\n      };\n    case 'SET-CURRENT-PAGE':\n      return {\n        ...state,\n        currentPage: action.currentPage\n      };\n    case 'SET-TOTAL-USERS-PAGE':\n      return {\n        ...state,\n        totalUsersCount: action.totalPage\n      };\n    case 'FOLLOW':\n      return {\n        ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return {\n              ...u,\n              followed: true\n            };\n          }\n          return u; // если id не совпадает\n        })\n      };\n\n    case 'UNFOLLOW':\n      return {\n        ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return {\n              ...u,\n              followed: false\n            };\n          }\n          return u;\n        })\n      };\n    case 'DELETE-USER':\n      return {\n        ...state,\n        users: state.users.filter(u => u.id !== action.userIdForDelete)\n      };\n    case 'TOGGLE-IS-FETCHING':\n      return {\n        ...state,\n        isFetching: action.toggle\n      };\n    case 'SET_SELECTED_VALUE':\n      return {\n        ...state,\n        selectedValue: action.currentValue\n      };\n    case 'SORT_USERS':\n      if (action.selectedValue == 'random') {\n        console.log(2);\n        return {\n          ...state,\n          users: state.users.sort((a, b) => a.name.localeCompare(b.name))\n        };\n      }\n      return state;\n    default:\n      return state;\n  }\n};\nexport let setSelectedValue = currentValue => {\n  return {\n    type: 'SET_SELECTED_VALUE',\n    currentValue\n  };\n};\nexport let sortUsers = () => {\n  return {\n    type: 'SORT_USERS'\n  };\n};\nexport let setUsers = users => {\n  return {\n    type: 'SET-USERS',\n    users\n  };\n};\nexport let setCurrentPage = currentPage => {\n  return {\n    type: 'SET-CURRENT-PAGE',\n    currentPage\n  };\n};\nexport let setTotalUsersPage = totalPage => {\n  return {\n    type: 'SET-TOTAL-USERS-PAGE',\n    totalPage\n  };\n};\nexport let follow = userId => {\n  return {\n    type: 'FOLLOW',\n    userId\n  };\n};\nexport let unfollow = userId => {\n  return {\n    type: 'UNFOLLOW',\n    userId\n  };\n};\nexport let removeUser = userIdForDelete => {\n  return {\n    type: 'DELETE-USER',\n    userIdForDelete\n  };\n};\nexport let isFetching = toggle => {\n  return {\n    type: 'TOGGLE-IS-FETCHING',\n    toggle\n  };\n};\nexport const getUsersThunkCreator = (currentPage, pageSize) => dispatch => {\n  dispatch(isFetching(true));\n  usersAPI.getUsers(currentPage, pageSize).then(data => {\n    //page - номер отображаемой страницы, count - кол-во отображаемых юзеров или то как называется pageSize в апишке\t\n    dispatch(setCurrentPage(currentPage));\n    dispatch(isFetching(false));\n    dispatch(setUsers(data.items));\n    dispatch(setTotalUsersPage(data.totalCount));\n  });\n};\nexport default usersReducer;","map":{"version":3,"names":["usersAPI","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","options","option","value","selectedValue","usersReducer","state","arguments","length","undefined","action","type","totalPage","map","u","id","userId","followed","filter","userIdForDelete","toggle","currentValue","console","log","sort","a","b","name","localeCompare","setSelectedValue","sortUsers","setUsers","setCurrentPage","setTotalUsersPage","follow","unfollow","removeUser","getUsersThunkCreator","dispatch","getUsers","then","data","items","totalCount"],"sources":["C:/Users/Kerim/Desktop/F-end/frontend/react/react-project/react-2/src/redux/users-reducer.js"],"sourcesContent":["import { usersAPI } from \"../API/api\"\r\nlet initialState = {\r\n\tusers: [],\r\n\tpageSize: 20,\r\n\ttotalUsersCount: 0,\r\n\tcurrentPage: 1,\r\n\tisFetching: false,\r\n\toptions: [\r\n\t\t{ option: 'Randomly', value: 'random' },\r\n\t\t{ option: 'By name', value: 'name' },\r\n\t],\r\n\tselectedValue: null,\r\n}\r\n\r\n\r\n\r\nconst usersReducer = (state = initialState, action) => { // Изначально под именем state пришел profilePage при удовлетворении условия if он преобразовывается и возвращается через тот-же state\r\n\t// rerender происходит не здесь\r\n\tswitch (action.type) {\r\n\t\tcase 'SET-USERS':\r\n\t\t\treturn {\r\n\t\t\t\t...state, users: action.users\r\n\t\t\t}\r\n\r\n\r\n\t\tcase 'SET-CURRENT-PAGE':\r\n\t\t\treturn {\r\n\t\t\t\t...state, currentPage: action.currentPage\r\n\t\t\t}\r\n\r\n\r\n\t\tcase 'SET-TOTAL-USERS-PAGE':\r\n\t\t\treturn {\r\n\t\t\t\t...state, totalUsersCount: action.totalPage\r\n\t\t\t}\r\n\r\n\t\tcase 'FOLLOW':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tusers: state.users.map(u => {\r\n\t\t\t\t\tif (u.id === action.userId) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t...u,\r\n\t\t\t\t\t\t\tfollowed: true,\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn u; // если id не совпадает\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\tcase 'UNFOLLOW':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tusers: state.users.map(u => {\r\n\t\t\t\t\tif (u.id === action.userId) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t...u,\r\n\t\t\t\t\t\t\tfollowed: false,\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn u;\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\tcase 'DELETE-USER':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tusers: state.users.filter(u => u.id !== action.userIdForDelete)\r\n\t\t\t}\r\n\r\n\r\n\t\tcase 'TOGGLE-IS-FETCHING':\r\n\t\t\treturn {\r\n\t\t\t\t...state, isFetching: action.toggle\r\n\t\t\t}\r\n\r\n\r\n\t\tcase 'SET_SELECTED_VALUE':\r\n\t\t\treturn{\r\n\t\t\t\t...state, selectedValue: action.currentValue,\r\n\t\t\t}\r\n\t\t\tcase 'SORT_USERS':\r\n\t\t\t\tif(action.selectedValue == 'random'){\r\n\t\t\t\t\tconsole.log(2)\r\n\t\t\t\t\treturn{\r\n\t\t\t\t\t\t...state,\r\n\t\t\t\t\t\tusers: state.users.sort((a, b) => a.name.localeCompare(b.name))\r\n\t\t\t\t\t}\r\n\t\t\t\t} return state\r\n\t\t\t\t\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport let setSelectedValue = (currentValue) => {\r\n\treturn ({\r\n\t\ttype: 'SET_SELECTED_VALUE',\r\n\t\tcurrentValue,\r\n\t})\r\n}\r\n\r\nexport let sortUsers = () =>{\r\n\treturn ({\r\n\t\ttype: 'SORT_USERS',\r\n\t})\r\n}\r\n\r\n\r\nexport let setUsers = (users) => {\r\n\treturn ({\r\n\t\ttype: 'SET-USERS',\r\n\t\tusers,\r\n\t})\r\n}\r\n\r\nexport let setCurrentPage = (currentPage) => {\r\n\treturn ({\r\n\t\ttype: 'SET-CURRENT-PAGE',\r\n\t\tcurrentPage\r\n\t})\r\n}\r\nexport let setTotalUsersPage = (totalPage) => {\r\n\treturn ({\r\n\t\ttype: 'SET-TOTAL-USERS-PAGE',\r\n\t\ttotalPage\r\n\t})\r\n}\r\n\r\n\r\nexport let follow = (userId) => {\r\n\treturn ({\r\n\t\ttype: 'FOLLOW',\r\n\t\tuserId,\r\n\t})\r\n}\r\nexport let unfollow = (userId) => {\r\n\treturn ({\r\n\t\ttype: 'UNFOLLOW',\r\n\t\tuserId,\r\n\t})\r\n}\r\n\r\nexport let removeUser = (userIdForDelete) => {\r\n\treturn ({\r\n\t\ttype: 'DELETE-USER',\r\n\t\tuserIdForDelete,\r\n\t})\r\n}\r\n\r\nexport let isFetching = (toggle) => {\r\n\treturn ({\r\n\t\ttype: 'TOGGLE-IS-FETCHING',\r\n\t\ttoggle,\r\n\t})\r\n}\r\n\r\nexport const getUsersThunkCreator = (currentPage, pageSize) => (dispatch) => {\r\n\tdispatch(isFetching(true));\r\n\tusersAPI.getUsers(currentPage, pageSize).then(data => { //page - номер отображаемой страницы, count - кол-во отображаемых юзеров или то как называется pageSize в апишке\t\r\n\t\tdispatch(setCurrentPage(currentPage));\r\n\t\tdispatch(isFetching(false));\r\n\t\tdispatch(setUsers(data.items));\r\n\t\tdispatch(setTotalUsersPage(data.totalCount));\r\n\t})\r\n}\r\n\r\n\r\nexport default usersReducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}