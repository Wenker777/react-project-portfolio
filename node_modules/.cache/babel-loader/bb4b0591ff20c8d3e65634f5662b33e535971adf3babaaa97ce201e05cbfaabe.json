{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kerim\\\\Desktop\\\\F-end\\\\frontend\\\\react\\\\react-project\\\\react-2\\\\src\\\\js-components\\\\Dialogs\\\\Dialogs.jsx\";\nimport DialogItem from \"./DialogItem\";\nimport s from \"./Dialogs.module.css\";\nimport DialogMessage from \"./DialogsMessage\";\n// messagesData: {\n// \tmessageFromMe:[\n// \t\t{id: 1, message: 'Hello, how are you?'},\n// \t],\n// \tmessageFromAnother:[\n// \t\t{id: 2, message: 'Hi, i`m good'},\n// \t]\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dialogs = props => {\n  let dialogsElements = props.dialogsElements.dialogsData.map(d => /*#__PURE__*/_jsxDEV(DialogItem, {\n    name: d.name,\n    id: d.id\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 68\n  }, this));\n  /*Создаем новую переменную в которую присваиваем преобразование массива данных применяя метод .map \r\n   далее объявляем стрелочную ф-ию => и пишем компоненту внутри неё прописываем атрибуты name & id которые достаем из названия ф-ии.\r\n   Далее просто вставляем новый массив в нужный участок JSX разметки\r\n   и он отобразит максимальное колличество элементов в случае dialogsData их будет 5*/\n  let messagesFromMeElemets = props.dialogsElements.messagesData.messageFromMe.map(m => /*#__PURE__*/_jsxDEV(DialogMessage, {\n    messageFromMe: m.message\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 89\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: s.dialogs__row,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.dialogs__items,\n      children: dialogsElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.dialogs__messages,\n      children: messagesFromMeElemets\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 3\n  }, this);\n};\n_c = Dialogs;\nexport default Dialogs;\nvar _c;\n$RefreshReg$(_c, \"Dialogs\");","map":{"version":3,"names":["DialogItem","s","DialogMessage","jsxDEV","_jsxDEV","Dialogs","props","dialogsElements","dialogsData","map","d","name","id","fileName","_jsxFileName","lineNumber","columnNumber","messagesFromMeElemets","messagesData","messageFromMe","m","message","className","dialogs__row","children","dialogs__items","dialogs__messages","_c","$RefreshReg$"],"sources":["C:/Users/Kerim/Desktop/F-end/frontend/react/react-project/react-2/src/js-components/Dialogs/Dialogs.jsx"],"sourcesContent":["import DialogItem from \"./DialogItem\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport DialogMessage from \"./DialogsMessage\";\r\n// messagesData: {\r\n// \tmessageFromMe:[\r\n// \t\t{id: 1, message: 'Hello, how are you?'},\r\n// \t],\r\n// \tmessageFromAnother:[\r\n// \t\t{id: 2, message: 'Hi, i`m good'},\r\n// \t]\r\nconst Dialogs = (props) => {\r\n\tlet dialogsElements = props.dialogsElements.dialogsData.map( d => <DialogItem name={d.name} id={d.id}/>) \r\n\t/*Создаем новую переменную в которую присваиваем преобразование массива данных применяя метод .map \r\n\t далее объявляем стрелочную ф-ию => и пишем компоненту внутри неё прописываем атрибуты name & id которые достаем из названия ф-ии.\r\n\t Далее просто вставляем новый массив в нужный участок JSX разметки\r\n\t и он отобразит максимальное колличество элементов в случае dialogsData их будет 5*/\r\n\tlet messagesFromMeElemets = props.dialogsElements.messagesData.messageFromMe.map( m => <DialogMessage messageFromMe={m.message}/>)\r\n\r\n\treturn (\r\n\t\t<div className={s.dialogs__row}>\r\n\t\t\t<div className={s.dialogs__items}>\r\n\t\t\t\t{dialogsElements}\r\n\t\t\t</div>\r\n\t\t\t<div className={s.dialogs__messages}>\r\n\t\t\t\t{messagesFromMeElemets}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default Dialogs;"],"mappings":";AAAA,OAAOA,UAAU,MAAM,cAAc;AACrC,OAAOC,CAAC,MAAM,sBAAsB;AACpC,OAAOC,aAAa,MAAM,kBAAkB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,OAAO,GAAIC,KAAK,IAAK;EAC1B,IAAIC,eAAe,GAAGD,KAAK,CAACC,eAAe,CAACC,WAAW,CAACC,GAAG,CAAEC,CAAC,iBAAIN,OAAA,CAACJ,UAAU;IAACW,IAAI,EAAED,CAAC,CAACC,IAAK;IAACC,EAAE,EAAEF,CAAC,CAACE;EAAG;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAC,CAAC,CAAC;EACxG;AACD;AACA;AACA;EACC,IAAIC,qBAAqB,GAAGX,KAAK,CAACC,eAAe,CAACW,YAAY,CAACC,aAAa,CAACV,GAAG,CAAEW,CAAC,iBAAIhB,OAAA,CAACF,aAAa;IAACiB,aAAa,EAAEC,CAAC,CAACC;EAAQ;IAAAR,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAC,CAAC,CAAC;EAElI,oBACCZ,OAAA;IAAKkB,SAAS,EAAErB,CAAC,CAACsB,YAAa;IAAAC,QAAA,gBAC9BpB,OAAA;MAAKkB,SAAS,EAAErB,CAAC,CAACwB,cAAe;MAAAD,QAAA,EAC/BjB;IAAe;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CAAC,eACNZ,OAAA;MAAKkB,SAAS,EAAErB,CAAC,CAACyB,iBAAkB;MAAAF,QAAA,EAClCP;IAAqB;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAER,CAAC;AAAAW,EAAA,GAlBKtB,OAAO;AAmBb,eAAeA,OAAO;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}